# -*- coding: utf-8 -*-
"""Copy_of_Gaussian_classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EC0livZk4ow27am11nrWODfWr9jQV7IF
"""

#!pip install PyQt5
#!pip install mplot3

import matplotlib
#import PyQt5
#matplotlib.use('Qt4Agg')
import pandas as pd
from IPython import embed
from matplotlib import colors
from matplotlib import pyplot as plt
from matplotlib import cm
from sklearn import datasets
import numpy as np
import tensorflow as tf
from sklearn.utils.fixes import logsumexp
import numpy as np
from sklearn.model_selection import train_test_split
from numpy import array
from sklearn.decomposition import PCA
from sklearn.naive_bayes import GaussianNB
from mpl_toolkits.mplot3d import Axes3D  # noqa: F401 unused import

#%matplotlib notebook

# %matplotlib inline
# import mpld3
# mpld3.enable_notebook()

word = "haberman"
link = 'https://archive.ics.uci.edu/ml/machine-learning-databases/'+ word + '/'+ word + '.data'
df = pd.read_csv(link)
data = array(df)

def pca(X, dim):
  pca = PCA(n_components=dim)
  principalComponents = pca.fit_transform(X)
  principalDf = pd.DataFrame(data = principalComponents)
  return principalComponents

print(data)
print(data.shape)

X, y = data[:, :-1], data[:,-1]-1
print(X.shape);
print(y.shape);

def gaussian_fit(X,y):
  gnb = GaussianNB()
  gnb.fit(X, y)
  prob_pos_clf = gnb.predict_proba(X)[:, 1]
  y_expect = np.where(prob_pos_clf > 0.5, 1, 0)
  return y_expect
y_expect = gaussian_fit(X,y)

"""#Accuracy:"""

print(1-sum(abs(y-y_expect))/y.shape[0])

'''
from sklearn.decomposition import PCA
pca = PCA(n_components=2)
principalComponents = pca.fit_transform(X)
principalDf = pd.DataFrame(data = principalComponents
             , columns = ['principal component 1', 'principal component 2'])
             '''

x2d = pca(X,2)

size = X.shape[0]
y_colors = strs = ["" for x in range(size)] 
for i in range(size):
  if y_expect[i] == y[i] and y_expect[i] == 1:
    y_colors[i]="red"
  if y_expect[i] == y[i] and y_expect[i] == 0:
    y_colors[i]="blue"
  if y_expect[i] != y[i]:
    y_colors[i]="green"



plt.figure(num=None, figsize=(28, 16), dpi=80, facecolor='w', edgecolor='k')
plt.scatter(x2d[:,0],x2d[:,1],c=y_colors)
plt.scatter(0,0,c='red', label="positive")
plt.scatter(0,0,c='green', label="wrong label")
plt.scatter(0,0,c='blue', label="negative")
plt.legend()
plt.show()

#X=pca(X,3)
fig = plt.figure(num=None, figsize=(28, 16), dpi=80, facecolor='w', edgecolor='k')
ax = fig.add_subplot(111, projection='3d')
n = X.shape[0]
ax.scatter(X[:,0],X[:,1],X[:,2],c=y_colors, marker='o')

ax.set_xlabel('X Label')
ax.set_ylabel('Y Label')
ax.set_zlabel('Z Label')

ax.scatter(0,0,0,c='r', label="positive")
ax.scatter(0,0,0,c='g', label="wrong label")
ax.scatter(0,0,0,c='b', label="negative")
ax.legend()

plt.show()

df2 = pd.read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00267/data_banknote_authentication.txt")
print(df2)

data2=array(df2)
x2, y2 = data2[:, :-1], data2[:,-1]

print(x2.shape)
print(y2.shape)

y2_expect = gaussian_fit(x2,y2)

print(y2_expect)

"""#Accuracy"""

print(1-sum(abs(y2-y2_expect))/y2.shape[0])

x2d2 = pca(x2,2)

def getcolors(X,y,y_expect):
  size = X.shape[0]
  y_colors = strs = ["" for x in range(size)] 
  for i in range(size):
    if y_expect[i] == y[i] and y_expect[i] == 1:
      y_colors[i]="red"
    if y_expect[i] == y[i] and y_expect[i] == 0:
      y_colors[i]="blue"
    if y_expect[i] != y[i]:
      y_colors[i]="green"
  return y_colors

colors2=getcolors(x2,y2,y2_expect)

plt.figure(num=None, figsize=(28, 16), dpi=80, facecolor='w', edgecolor='k')
plt.scatter(x2d2[:,0],x2d2[:,1],c=colors2)
plt.scatter(0,0,c='red', label="positive")
plt.scatter(0,0,c='green', label="wrong label")
plt.scatter(0,0,c='blue', label="negative")
plt.legend()
plt.show()

X=pca(X,3)
fig = plt.figure(num=None, figsize=(28, 16), dpi=80, facecolor='w', edgecolor='k')
ax = fig.add_subplot(111, projection='3d')
n = x2.shape[0]
ax.scatter(x2[:,0],x2[:,1],x2[:,2],c=colors2, marker='o')

ax.set_xlabel('X Label')
ax.set_ylabel('Y Label')
ax.set_zlabel('Z Label')

ax.scatter(0,0,0,c='r', label="positive")
ax.scatter(0,0,0,c='g', label="wrong label")
ax.scatter(0,0,0,c='b', label="negative")
ax.legend()

plt.show()



